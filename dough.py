import streamlit as st
import numpy as np
import pandas as pd
from io import BytesIO
from datetime import timedelta
from math import ceil
from datetime import datetime

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–∞–≥–æ–Ω–µ—Ç–∫–∞–º
def distribute_to_trolleys(df):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ª–∏—Å—Ç–æ–≤
    df['–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—Å—Ç–æ–≤'] = np.ceil(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π –ø–ª–∞–Ω'] / df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ª–∏—Å—Ç–µ'])
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    sorted_df = df.sort_values(by=['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –≤–∞–≥–æ–Ω–µ—Ç–æ–∫
    trolley_df = pd.DataFrame()
    
    # –°—á–µ—Ç—á–∏–∫ –≤–∞–≥–æ–Ω–µ—Ç–æ–∫
    trolley_counter = 1
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ç–∏–ø–æ–º —Ç–µ—Å—Ç–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –ø–µ—á–∏
    for (test_type, temp), group in sorted_df.groupby(['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']):
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ª–∏—Å—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–µ
        current_trolley_sheets = 0
        # –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–æ–∫–∞–º –≥—Ä—É–ø–ø—ã
        group = group.reset_index(drop=True)

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –≤ –≥—Ä—É–ø–ø–µ
        for idx, row in group.iterrows():
            sheets_needed = row['–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—Å—Ç–æ–≤']
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –≤–∞–≥–æ–Ω–µ—Ç–∫–∞–º
            while sheets_needed > 0:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤ –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–µ
                available_sheets = min(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ'] - current_trolley_sheets, sheets_needed)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
                if available_sheets <= 0:
                    trolley_counter += 1
                    current_trolley_sheets = 0
                    continue
                
                # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏—Å—Ç—ã –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ
                trolley_id = f'–í–∞–≥–æ–Ω–µ—Ç–∫–∞ {trolley_counter}'
                trolley_df.at[trolley_id, row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']] = available_sheets + trolley_df.get((trolley_id, row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']), 0)
                
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–∏—Å—Ç–æ–≤
                sheets_needed -= available_sheets
                current_trolley_sheets += available_sheets

                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤–∞–≥–æ–Ω–µ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
                if current_trolley_sheets >= row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ']:
                    trolley_counter += 1
                    current_trolley_sheets = 0

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω—É–ª—è–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    trolley_df = trolley_df.fillna(0)

    return trolley_df
def distribute_to_trolleys_sorted(df):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è '–∫—É—Å–æ–∫' –≤ NaN –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    df['–†–∞–∑–º–µ—Ä –∑—É–≤–∞–ª—è—à–∫–∏'] = pd.to_numeric(df['–†–∞–∑–º–µ—Ä –∑—É–≤–∞–ª—è—à–∫–∏'], errors='coerce').fillna(999)
    df['–¢–∏–ø —Ç–µ—Å—Ç–∞'] = pd.Categorical(df['–¢–∏–ø —Ç–µ—Å—Ç–∞'], categories=['—Å–ª–∞–¥–∫–æ–µ', '—Å–æ–ª–µ–Ω–æ–µ'], ordered=True)
    df = df.sort_values(by=['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–†–∞–∑–º–µ—Ä –∑—É–≤–∞–ª—è—à–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ'], ascending=[True, False, False])
    df.reset_index(drop=True, inplace=True)
    return distribute_to_trolleys(df)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–≥–æ–Ω–µ—Ç–æ–∫ –ø–æ –ø–µ—á–∞–º
def schedule_oven_operations(start_shift, end_shift, num_ovens, change_trolley_time, change_temp_time, trolley_df):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –≤ –æ–±—ä–µ–∫—Ç—ã datetime
    start_shift = datetime.strptime(start_shift, '%H:%M')
    end_shift = datetime.strptime(end_shift, '%H:%M')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—á–∏
    ovens_schedule = {f'–ü–µ—á—å {i+1}': [] for i in range(num_ovens)}
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–∞–∂–¥–æ–π –ø–µ—á–∏
    last_operation_time = {f'–ü–µ—á—å {i+1}': start_shift for i in range(num_ovens)}
    
    # –¢–µ–∫—É—â–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞–∂–¥–æ–π –ø–µ—á–∏
    current_temp = {f'–ü–µ—á—å {i+1}': None for i in range(num_ovens)}
    
    # –û–±—Ö–æ–¥ –≤—Å–µ—Ö –≤–∞–≥–æ–Ω–µ—Ç–æ–∫ –≤ df
    for _, trolley in trolley_df.iterrows():
        # –í—ã–±–æ—Ä –ø–µ—á–∏ —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        next_oven = min(last_operation_time, key=last_operation_time.get)
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–µ–∫–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—á–∏
        start_baking_time = last_operation_time[next_oven]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–º–µ–Ω—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if current_temp[next_oven] != trolley['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']:
            start_baking_time += timedelta(minutes=change_temp_time)
            current_temp[next_oven] = trolley['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–µ–∫–∞–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–º–µ–Ω—É –≤–∞–≥–æ–Ω–µ—Ç–∫–∏
        end_baking_time = start_baking_time + timedelta(minutes=trolley['–í—Ä–µ–º—è'] + change_trolley_time)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã
        if end_baking_time > end_shift:
            continue  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–µ–∫–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–º–µ–Ω—ã, –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç—É –≤–∞–≥–æ–Ω–µ—Ç–∫—É
        
        # –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–µ–∫–∞–Ω–∏—è
        duration = (end_baking_time - start_baking_time).seconds // 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        # –°–æ—Å—Ç–∞–≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–∏
        trolley_composition = ', '.join([
            f"{product}: {int(trolley[product])} –ª–∏—Å—Ç–æ–≤ ({int(trolley[product]) * df.loc[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'] == product, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ª–∏—Å—Ç–µ'].iloc[0]} —à—Ç—É–∫)"
            for product in df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'].unique() if trolley.get(product, 0) > 0
        ])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–µ–∫–∞–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—á–∏
        ovens_schedule[next_oven].append({
            '–ù–∞—á–∞–ª–æ': start_baking_time.time(),
            '–ö–æ–Ω–µ—Ü': end_baking_time.time(),
            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': duration,
            '–°–æ—Å—Ç–∞–≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–∏': trolley_composition,
            '–í–∞–≥–æ–Ω–µ—Ç–∫–∞': trolley.name,
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏': trolley['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']
        })
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø–µ—á–∏
        last_operation_time[next_oven] = end_baking_time


def to_df_from_list(dicti):
    schedule_df = pd.DataFrame(dicti)
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '–ù–∞—á–∞–ª–æ' –∏ '–ö–æ–Ω–µ—Ü' —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏—Ö
    if all(isinstance(x, (int, float)) for x in schedule_df['–ù–∞—á–∞–ª–æ']):
        schedule_df['–ù–∞—á–∞–ª–æ'] = pd.to_datetime(schedule_df['–ù–∞—á–∞–ª–æ'], unit='ns')
        schedule_df['–ö–æ–Ω–µ—Ü'] = pd.to_datetime(schedule_df['–ö–æ–Ω–µ—Ü'], unit='ns')
    return schedule_df

def to_excel():
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    with writer as w:
        for i in pd.DataFrame(ovens_schedule).columns:
            a = to_df_from_list(ovens_schedule[i])
            a.to_excel(writer, sheet_name=i, index=False)
    writer._save()
    return output.getvalue()


st.markdown('''<h3>–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏</h3>''', unsafe_allow_html=True)
df = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", accept_multiple_files=False)
if df: 
  df = pd.read_excel(df)
  st.dataframe(df)
  st.dataframe(distribute_to_trolleys_sorted(df))
  ovens_schedule = schedule_oven_operations('13:00', '21:00', 3, 2, 5, df)
  st.dataframe(ovens_schedule)
 
df_xlsx = to_excel()
st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω –≤ Excel', data=df_xlsx, file_name='Backing_Plan.xlsx')
    
