import streamlit as st
import numpy as np
import pandas as pd
from io import BytesIO
from datetime import timedelta


# –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é create_full_baking_schedule —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è df_products_sorted
def create_full_baking_schedule(df, temp_for_oven1, start_time, reset_time=10, basket_interval=3):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—á–∏
    oven1_time = pd.to_datetime(start_time)
    oven2_time = pd.to_datetime(start_time)
    # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    last_temp_oven1 = temp_for_oven1
    last_temp_oven2 = None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã–ø–µ–∫–∞–Ω–∏—è
    baking_schedule = []

    # –ü–µ—Ä–µ–±–æ—Ä SKU –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –ø–µ—á–∞–º
    for index, row in df.iterrows():
        oven_time = oven1_time if row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'] == temp_for_oven1 else oven2_time
        oven_name = "–ü–µ—á—å 1" if row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'] == temp_for_oven1 else "–ü–µ—á—å 2"
        last_temp = last_temp_oven1 if oven_name == "–ü–µ—á—å 1" else last_temp_oven2

        # –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if last_temp != row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']:
            baking_schedule.append([oven_name, "–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "", last_temp, oven_time, "", "", reset_time])
            oven_time += timedelta(minutes=reset_time)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–µ–∫–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–∏
        for basket in range(1, row['–ö–æ–ª-–≤–æ –≤–∞–≥–æ–Ω–µ—Ç–æ–∫'] + 1):
            baking_schedule.append([oven_name, row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'], basket, row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'], oven_time, oven_time - timedelta(hours=1.4), oven_time - timedelta(hours=3.3), row['–í—Ä–µ–º—è']])
            oven_time += timedelta(minutes=row['–í—Ä–µ–º—è'] + basket_interval)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–ø–µ–∫–∞–µ–º–æ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—á–∏
        if oven_name == "–ü–µ—á—å 1":
            oven1_time = oven_time
            last_temp_oven1 = row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']
        else:
            oven2_time = oven_time
            last_temp_oven2 = row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']
        df = pd.DataFrame(baking_schedule, columns=["–ü–µ—á—å", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–í–∞–≥–æ–Ω–µ—Ç–∫–∞", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏", "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–µ–∫–∞–Ω–∏—è", "–í—Ä–µ–º—è —Ñ–æ—Ä–º–æ–≤–∫–∏", "–í—Ä–µ–º—è –∑–∞–º–µ—Å–∞", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"])
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ datetime –æ–±—ä–µ–∫—Ç—ã, –∞ –∑–∞—Ç–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ö –∫–∞–∫ 'HH:MM'
        df['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–µ–∫–∞–Ω–∏—è'] = pd.to_datetime(df['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–µ–∫–∞–Ω–∏—è']).dt.strftime('%H:%M')
        df['–í—Ä–µ–º—è —Ñ–æ—Ä–º–æ–≤–∫–∏'] = pd.to_datetime(df['–í—Ä–µ–º—è —Ñ–æ—Ä–º–æ–≤–∫–∏']).dt.strftime('%H:%M')
        df['–í—Ä–µ–º—è –∑–∞–º–µ—Å–∞'] = pd.to_datetime(df['–í—Ä–µ–º—è –∑–∞–º–µ—Å–∞']).dt.strftime('%H:%M')

    return df

def to_excel():
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    with writer as w:
        for i in final_res:
            i.to_excel(writer, sheet_name=i["–ü–µ—á—å"].unique()[0], index=False)
    writer._save()
    return output.getvalue()


st.markdown('''<h3>–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏</h3>''', unsafe_allow_html=True)
df = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", accept_multiple_files=False)
if df: 
  df = pd.read_excel(df)
  st.dataframe(df)
  df_products = df
  df_products_sorted = df_products.sort_values(by=['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'], ascending=[False])
  final_res = []
  shift_start = '13:00'
  for i in df_products_sorted["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏"].unique():
      full_baking_schedule = create_full_baking_schedule(df_products_sorted, i, shift_start)
      full_baking_schedule = full_baking_schedule[full_baking_schedule['–ü–µ—á—å'] == "–ü–µ—á—å 1"]
      full_baking_schedule["–ü–µ—á—å"] = f'–ü–µ—á —Ä–µ–∂–∏–º {i}'
      final_res.append(full_baking_schedule)
  
df_xlsx = to_excel()
st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω –≤ Excel', data=df_xlsx, file_name='Backing_Plan.xlsx')
    
