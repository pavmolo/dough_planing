import streamlit as st
import numpy as np
import pandas as pd
from io import BytesIO
from datetime import timedelta
from math import ceil
def distribute_to_trolleys_sorted(df):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –†–∞–∑–º–µ—Ä –∑—É–≤–∞–ª—è—à–∫–∏ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, '–∫—É—Å–æ–∫' –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤—ã—Å–æ–∫–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    df['–í–µ—Å –∑—É–≤–∞–ª—è—à–∫–∏'] = df['–†–∞–∑–º–µ—Ä –∑—É–≤–∞–ª—è—à–∫–∏'].replace('–∫—É—Å–æ–∫', 999).astype(int)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–∞ (—Å–ª–∞–¥–∫–æ–µ, –∑–∞—Ç–µ–º —Å–æ–ª–µ–Ω–æ–µ), –≤–µ—Å—É –∑—É–≤–∞–ª—è—à–∫–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    df = df.sort_values(by=['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–í–µ—Å –∑—É–≤–∞–ª—è—à–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ'], ascending=[True, False, False])

    # –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    df.reset_index(drop=True, inplace=True)
    
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ –≤–∞–≥–æ–Ω–µ—Ç–∫–∞–º —Å —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º DataFrame
    return distribute_to_trolleys(df)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–∞–≥–æ–Ω–µ—Ç–∫–∞–º
def distribute_to_trolleys(df):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ª–∏—Å—Ç–æ–≤
    df['–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—Å—Ç–æ–≤'] = np.ceil(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π –ø–ª–∞–Ω'] / df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ª–∏—Å—Ç–µ'])
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    sorted_df = df.sort_values(by=['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –≤–∞–≥–æ–Ω–µ—Ç–æ–∫
    trolley_df = pd.DataFrame()
    
    # –°—á–µ—Ç—á–∏–∫ –≤–∞–≥–æ–Ω–µ—Ç–æ–∫
    trolley_counter = 1
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ç–∏–ø–æ–º —Ç–µ—Å—Ç–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –ø–µ—á–∏
    for (test_type, temp), group in sorted_df.groupby(['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']):
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ª–∏—Å—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–µ
        current_trolley_sheets = 0
        # –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–æ–∫–∞–º –≥—Ä—É–ø–ø—ã
        group = group.reset_index(drop=True)

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –≤ –≥—Ä—É–ø–ø–µ
        for idx, row in group.iterrows():
            sheets_needed = row['–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—Å—Ç–æ–≤']
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –≤–∞–≥–æ–Ω–µ—Ç–∫–∞–º
            while sheets_needed > 0:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤ –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–µ
                available_sheets = min(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ'] - current_trolley_sheets, sheets_needed)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
                if available_sheets <= 0:
                    trolley_counter += 1
                    current_trolley_sheets = 0
                    continue
                
                # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏—Å—Ç—ã –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ
                trolley_id = f'–í–∞–≥–æ–Ω–µ—Ç–∫–∞ {trolley_counter}'
                trolley_df.at[trolley_id, row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']] = available_sheets + trolley_df.get((trolley_id, row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']), 0)
                
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–∏—Å—Ç–æ–≤
                sheets_needed -= available_sheets
                current_trolley_sheets += available_sheets

                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤–∞–≥–æ–Ω–µ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
                if current_trolley_sheets >= row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ']:
                    trolley_counter += 1
                    current_trolley_sheets = 0

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω—É–ª—è–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    trolley_df = trolley_df.fillna(0)

    return trolley_df

# –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é create_full_baking_schedule —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è df_products_sorted
def create_full_baking_schedule(df, temp_for_oven1, start_time, reset_time=10, basket_interval=3):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—á–∏
    oven1_time = pd.to_datetime(start_time)
    oven2_time = pd.to_datetime(start_time)
    # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    last_temp_oven1 = temp_for_oven1
    last_temp_oven2 = None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã–ø–µ–∫–∞–Ω–∏—è
    baking_schedule = []

    # –ü–µ—Ä–µ–±–æ—Ä SKU –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –ø–µ—á–∞–º
    for index, row in df.iterrows():
        oven_time = oven1_time if row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'] == temp_for_oven1 else oven2_time
        oven_name = "–ü–µ—á—å 1" if row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'] == temp_for_oven1 else "–ü–µ—á—å 2"
        last_temp = last_temp_oven1 if oven_name == "–ü–µ—á—å 1" else last_temp_oven2

        # –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if last_temp != row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']:
            baking_schedule.append([oven_name, "–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "", last_temp, oven_time, "", "", reset_time])
            oven_time += timedelta(minutes=reset_time)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–µ–∫–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–∏
        for basket in range(1, row['–ö–æ–ª-–≤–æ –≤–∞–≥–æ–Ω–µ—Ç–æ–∫'] + 1):
            baking_schedule.append([oven_name, row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'], basket, row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'], oven_time, oven_time - timedelta(hours=1.4), oven_time - timedelta(hours=3.3), row['–í—Ä–µ–º—è']])
            oven_time += timedelta(minutes=row['–í—Ä–µ–º—è'] + basket_interval)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–ø–µ–∫–∞–µ–º–æ–π –≤–∞–≥–æ–Ω–µ—Ç–∫–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—á–∏
        if oven_name == "–ü–µ—á—å 1":
            oven1_time = oven_time
            last_temp_oven1 = row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']
        else:
            oven2_time = oven_time
            last_temp_oven2 = row['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']
        df = pd.DataFrame(baking_schedule, columns=["–ü–µ—á—å", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–í–∞–≥–æ–Ω–µ—Ç–∫–∞", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏", "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–µ–∫–∞–Ω–∏—è", "–í—Ä–µ–º—è —Ñ–æ—Ä–º–æ–≤–∫–∏", "–í—Ä–µ–º—è –∑–∞–º–µ—Å–∞", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"])
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ datetime –æ–±—ä–µ–∫—Ç—ã, –∞ –∑–∞—Ç–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ö –∫–∞–∫ 'HH:MM'
        df['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–µ–∫–∞–Ω–∏—è'] = pd.to_datetime(df['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–µ–∫–∞–Ω–∏—è']).dt.strftime('%H:%M')
        df['–í—Ä–µ–º—è —Ñ–æ—Ä–º–æ–≤–∫–∏'] = pd.to_datetime(df['–í—Ä–µ–º—è —Ñ–æ—Ä–º–æ–≤–∫–∏']).dt.strftime('%H:%M')
        df['–í—Ä–µ–º—è –∑–∞–º–µ—Å–∞'] = pd.to_datetime(df['–í—Ä–µ–º—è –∑–∞–º–µ—Å–∞']).dt.strftime('%H:%M')

    return df

def to_excel():
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    with writer as w:
        for i in final_res:
            i.to_excel(writer, sheet_name=i["–ü–µ—á—å"].unique()[0], index=False)
    writer._save()
    return output.getvalue()


st.markdown('''<h3>–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏</h3>''', unsafe_allow_html=True)
df = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", accept_multiple_files=False)
if df: 
  df = pd.read_excel(df)
  df = distribute_to_trolleys_sorted(df)
  st.dataframe(distribute_to_trolleys(df))
  df_products = df
  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  df_products['–¢–∏–ø —Ç–µ—Å—Ç–∞'] = pd.Categorical(df_products['–¢–∏–ø —Ç–µ—Å—Ç–∞'], categories=['—Å–ª–∞–¥–∫–æ–µ', '—Å–æ–ª–µ–Ω–æ–µ'], ordered=True)
  df_products['–ï—Å—Ç—å —Å–∏—Ä–æ–ø'] = pd.Categorical(df_products['–ï—Å—Ç—å —Å–∏—Ä–æ–ø'], categories=['–¥–∞', '–Ω–µ—Ç'], ordered=True)
    
  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ç–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–Ω–∞—á–∞–ª–∞, –∞ –∑–∞—Ç–µ–º –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –ø–µ—á–∏
  df_products_sorted = df_products.sort_values(by=['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–ï—Å—Ç—å —Å–∏—Ä–æ–ø', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'], ascending=[True, False, False])
  final_res = []
  shift_start = '13:00'
  for i in df_products_sorted["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏"].unique():
      full_baking_schedule = create_full_baking_schedule(df_products_sorted, i, shift_start)
      full_baking_schedule = full_baking_schedule[full_baking_schedule['–ü–µ—á—å'] == "–ü–µ—á—å 1"]
      full_baking_schedule["–ü–µ—á—å"] = f'–ü–µ—á —Ä–µ–∂–∏–º {i}'
      final_res.append(full_baking_schedule)
 
df_xlsx = to_excel()
st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω –≤ Excel', data=df_xlsx, file_name='Backing_Plan.xlsx')
    
