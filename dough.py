import streamlit as st
import numpy as np
import pandas as pd
from io import BytesIO
from datetime import timedelta
from math import ceil
from datetime import datetime

def distribute_to_trolleys(df):
    df['–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—Å—Ç–æ–≤'] = np.ceil(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π –ø–ª–∞–Ω'] / df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ª–∏—Å—Ç–µ'])
    sorted_df = df.sort_values(by=['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'])
    
    trolley_info = {}
    trolley_counter = 1
    
    for (test_type, temp), group in sorted_df.groupby(['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'], observed=True):
        current_trolley_sheets = 0
        group = group.reset_index(drop=True)
        
        for idx, row in group.iterrows():
            sheets_needed = row['–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—Å—Ç–æ–≤']
            
            while sheets_needed > 0:
                trolley_id = f'–í–∞–≥–æ–Ω–µ—Ç–∫–∞ {trolley_counter}'
                if trolley_id not in trolley_info:
                    trolley_info[trolley_id] = {
                        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏': temp,
                        '–í—Ä–µ–º—è': row['–í—Ä–µ–º—è'],
                        '–ü—Ä–æ–¥—É–∫—Ü–∏—è': []
                    }
                
                available_sheets = min(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ'] - current_trolley_sheets, sheets_needed)
                if available_sheets <= 0:
                    trolley_counter += 1
                    current_trolley_sheets = 0
                    continue
                
                trolley_info[trolley_id]['–ü—Ä–æ–¥—É–∫—Ü–∏—è'].append({
                    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'],
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤': available_sheets,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ª–∏—Å—Ç–µ': row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ª–∏—Å—Ç–µ']
                })
                
                sheets_needed -= available_sheets
                current_trolley_sheets += available_sheets
                if current_trolley_sheets >= row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ']:
                    trolley_counter += 1
                    current_trolley_sheets = 0
    
    trolley_df_list = []
    for trolley_id, info in trolley_info.items():
        trolley_dict = {
            '–í–∞–≥–æ–Ω–µ—Ç–∫–∞': trolley_id,
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏': info['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'],
            '–í—Ä–µ–º—è': info['–í—Ä–µ–º—è']
        }
        
        for prod_info in info['–ü—Ä–æ–¥—É–∫—Ü–∏—è']:
            product_name = prod_info['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']
            sheets = prod_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤']
            quantity_per_sheet = prod_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ª–∏—Å—Ç–µ']
            quantity = sheets * quantity_per_sheet
            trolley_dict[product_name] = f"{sheets} –ª–∏—Å—Ç–æ–≤ ({quantity} —à—Ç—É–∫)"
        
        trolley_df_list.append(trolley_dict)
    
    return pd.DataFrame(trolley_df_list), trolley_info



def distribute_to_trolleys_sorted(df):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è '–∫—É—Å–æ–∫' –≤ NaN –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    df['–†–∞–∑–º–µ—Ä –∑—É–≤–∞–ª—è—à–∫–∏'] = pd.to_numeric(df['–†–∞–∑–º–µ—Ä –∑—É–≤–∞–ª—è—à–∫–∏'], errors='coerce').fillna(999)
    df['–¢–∏–ø —Ç–µ—Å—Ç–∞'] = pd.Categorical(df['–¢–∏–ø —Ç–µ—Å—Ç–∞'], categories=['—Å–ª–∞–¥–∫–æ–µ', '—Å–æ–ª–µ–Ω–æ–µ'], ordered=True)
    df = df.sort_values(by=['–¢–∏–ø —Ç–µ—Å—Ç–∞', '–†–∞–∑–º–µ—Ä –∑—É–≤–∞–ª—è—à–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –≤–∞–≥–æ–Ω–µ—Ç–∫–µ'], ascending=[True, False, False])
    df.reset_index(drop=True, inplace=True)
    return distribute_to_trolleys(df)



# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è schedule_oven_operations —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Å—Ç–∞–≤–∞ –≤–∞–≥–æ–Ω–µ—Ç–∫–∏
def schedule_oven_operations(start_shift, end_shift, num_ovens, change_trolley_time, change_temp_time, trolley_df, trolley_info):
    start_shift = datetime.strptime(start_shift, '%H:%M')
    end_shift = datetime.strptime(end_shift, '%H:%M')
    ovens_schedule = {f'–ü–µ—á—å {i+1}': [] for i in range(num_ovens)}
    last_operation_time = {f'–ü–µ—á—å {i+1}': start_shift for i in range(num_ovens)}
    current_temp = {f'–ü–µ—á—å {i+1}': None for i in range(num_ovens)}
    
    trolley_composition = pd.DataFrame(columns=['–í–∞–≥–æ–Ω–µ—Ç–∫–∞', '–°–æ—Å—Ç–∞–≤'])
    
    for _, trolley in trolley_df.iterrows():
        next_oven = min(last_operation_time, key=last_operation_time.get)
        start_baking_time = last_operation_time[next_oven]
        
        if current_temp[next_oven] != trolley['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']:
            start_baking_time += timedelta(minutes=change_temp_time)
            current_temp[next_oven] = trolley['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏']
        
        end_baking_time = start_baking_time + timedelta(minutes=trolley['–í—Ä–µ–º—è'] + change_trolley_time)
        
        if end_baking_time <= end_shift:
            composition = ", ".join([
                f"{prod_info['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}: {prod_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤']} –ª–∏—Å—Ç–æ–≤ "
                f"({int(prod_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤'] * prod_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ª–∏—Å—Ç–µ'])} —à—Ç—É–∫)"
                for prod_info in trolley_info[trolley['–í–∞–≥–æ–Ω–µ—Ç–∫–∞']]['–ü—Ä–æ–¥—É–∫—Ü–∏—è']
            ])
            
            trolley_composition = pd.concat([trolley_composition, pd.DataFrame([new_row])], ignore_index=True)

            
            ovens_schedule[next_oven].append({
                '–ù–∞—á–∞–ª–æ': start_baking_time.time(),
                '–ö–æ–Ω–µ—Ü': end_baking_time.time(),
                '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': trolley['–í—Ä–µ–º—è'],
                '–í–∞–≥–æ–Ω–µ—Ç–∫–∞': trolley['–í–∞–≥–æ–Ω–µ—Ç–∫–∞'],
                '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏': trolley['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–µ—á–∏'],
                '–°–æ—Å—Ç–∞–≤': composition
            })
            
            last_operation_time[next_oven] = end_baking_time
    
    return ovens_schedule, trolley_composition



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–µ—á–µ–π –≤ DataFrame
def to_df_from_schedule(ovens_schedule):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ DataFrame
    oven_dfs = []
    for oven, schedule in ovens_schedule.items():
        oven_df = pd.DataFrame(schedule)
        oven_df.insert(0, '–ü–µ—á—å', oven)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–µ—á–∏
        oven_dfs.append(oven_df)
    full_schedule_df = pd.concat(oven_dfs, ignore_index=True)
    return full_schedule_df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è DataFrame –≤ Excel
def to_excel(oven_schedule_df, trolley_composition_df):
    output = BytesIO()
    with pd.ExcelWriter(output) as writer:
        oven_schedule_df.to_excel(writer, sheet_name='Oven Schedule', index=False)
        trolley_composition_df.to_excel(writer, sheet_name='Trolley Composition', index=False)
    return output.getvalue()


st.markdown('''<h3>–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏</h3>''', unsafe_allow_html=True)
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", accept_multiple_files=False)

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ df —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ª–±–µ—Ü '–í—Ä–µ–º—è'
    sorted_trolleys_df, trolley_info = distribute_to_trolleys_sorted(df)
    ovens_schedule, trolley_composition = schedule_oven_operations('13:00', '21:00', 3, 2, 5, sorted_trolleys_df, trolley_info)
    
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ to_excel –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ Excel –∏–∑ DataFrame
    df_xlsx = to_excel(oven_schedule_df, trolley_composition_df)
    st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω –≤ Excel', data=df_xlsx, file_name='Backing_Plan.xlsx')
    
